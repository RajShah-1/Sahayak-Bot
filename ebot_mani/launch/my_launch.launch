<launch>

<arg name="joint_state_pubs_gui" default="false"/>
<arg name="joint_state_pubs_rate" default="10"/>

<!-- Joint state publisher -->
<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="$(arg joint_state_pubs_gui)"/>
    <param name="/rate" value="$(arg joint_state_pubs_rate)"/>
    <rosparam param="/source_list">[/joint_states]</rosparam>
</node>


<!-- Robot state publisher -->
<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" type="string" value="" />
</node>


<!-- Load joint controller configurations from YAML file to parameter server -->
<rosparam file="$(find ebot_mani)/config/ros_controllers.yaml" command="load"/>


<!-- Gazebo interface -->
<rosparam file="$(find ebot_mani)/config/trajectory_control.yaml" command="load"/>
<node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" 
args="spawn arm_controller gripper_controller" respawn="false" output="screen"/>


<!-- Planning context -->
<!-- Settings of kinematic solver -->
<include file="$(find ebot_mani)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
</include>


<!-- Joint state controller -->
<!-- the joint_state_controller is a class in one of the packages of ros_control.
It is not a stand-alone node. This one does interface with hardware. 
It's called a "controller" but it's not: it is a class that transforms data 
from an internal ros_control representation to JointState messages and publishes those -->
<rosparam file="$(find ebot_mani)/config/joint_state_controller.yaml" command="load"/>
<node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager"
args="spawn joint_state_controller" respawn="false" output="screen"/>


<!-- Start move_group node -->
<include file="$(find ebot_mani)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
</include>


<!-- Start rviz -->
<include file="$(find ebot_mani)/launch/moveit_rviz.launch">
  <arg name="rviz_config" value="$(find ebot_mani)/launch/moveit.rviz"/>
  <arg name="debug" value="false"/>
</include> 


<!-- Node to controller manipulator -->
<node name="sara" pkg="object_recognition" type="main.py" output="screen"/>
<node name="detector" pkg="object_recognition" type="object_recognition_main_node" output="screen"/>


</launch>